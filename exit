[33mcommit eb34dc453883d15cc4e44a0e860edf4131d3ef2b[m[33m ([m[1;31morigin/main[m[33m, [m[1;31morigin/HEAD[m[33m)[m
Author: ATH\nmavrofo <nikos.mavroforos@intrasoft-intl.com>
Date:   Thu Oct 7 00:20:44 2021 +0300

    setup auth token

[1mdiff --git a/.idea/dataSources.xml b/.idea/dataSources.xml[m
[1mnew file mode 100644[m
[1mindex 0000000..be3c0fd[m
[1m--- /dev/null[m
[1m+++ b/.idea/dataSources.xml[m
[36m@@ -0,0 +1,12 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<project version="4">[m
[32m+[m[32m  <component name="DataSourceManagerImpl" format="xml" multifile-model="true">[m
[32m+[m[32m    <data-source source="LOCAL" name="PostgreSQL - app@localhost" uuid="ef363d85-1ee0-4451-a270-76e996b8c153">[m
[32m+[m[32m      <driver-ref>postgresql</driver-ref>[m
[32m+[m[32m      <synchronize>true</synchronize>[m
[32m+[m[32m      <jdbc-driver>org.postgresql.Driver</jdbc-driver>[m
[32m+[m[32m      <jdbc-url>jdbc:postgresql://localhost:5432/app</jdbc-url>[m
[32m+[m[32m      <working-dir>$ProjectFileDir$</working-dir>[m
[32m+[m[32m    </data-source>[m
[32m+[m[32m  </component>[m
[32m+[m[32m</project>[m
\ No newline at end of file[m
[1mdiff --git a/app/app/settings.py b/app/app/settings.py[m
[1mindex f83fc58..9168367 100644[m
[1m--- a/app/app/settings.py[m
[1m+++ b/app/app/settings.py[m
[36m@@ -35,7 +35,10 @@[m [mINSTALLED_APPS = [[m
     'django.contrib.sessions',[m
     'django.contrib.messages',[m
     'django.contrib.staticfiles',[m
[32m+[m[32m    'rest_framework',[m
[32m+[m[32m    'rest_framework.authtoken',[m
     'core',[m
[32m+[m[32m    'user'[m
 ][m
 [m
 MIDDLEWARE = [[m
[1mdiff --git a/app/app/urls.py b/app/app/urls.py[m
[1mindex 5348901..159d151 100644[m
[1m--- a/app/app/urls.py[m
[1m+++ b/app/app/urls.py[m
[36m@@ -14,8 +14,9 @@[m [mIncluding another URLconf[m
     2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))[m
 """[m
 from django.contrib import admin[m
[31m-from django.urls import path[m
[32m+[m[32mfrom django.urls import path, include[m
 [m
 urlpatterns = [[m
     path('admin/', admin.site.urls),[m
[32m+[m[32m    path('api/user/', include('user.urls'))[m
 ][m
[1mdiff --git a/app/user/__init__.py b/app/user/__init__.py[m
[1mnew file mode 100644[m
[1mindex 0000000..e69de29[m
[1mdiff --git a/app/user/apps.py b/app/user/apps.py[m
[1mnew file mode 100644[m
[1mindex 0000000..35048d4[m
[1m--- /dev/null[m
[1m+++ b/app/user/apps.py[m
[36m@@ -0,0 +1,5 @@[m
[32m+[m[32mfrom django.apps import AppConfig[m
[32m+[m
[32m+[m
[32m+[m[32mclass UserConfig(AppConfig):[m
[32m+[m[32m    name = 'user'[m
[1mdiff --git a/app/user/serializer.py b/app/user/serializer.py[m
[1mnew file mode 100644[m
[1mindex 0000000..0cfd6f3[m
[1m--- /dev/null[m
[1m+++ b/app/user/serializer.py[m
[36m@@ -0,0 +1,40 @@[m
[32m+[m[32mfrom django.contrib.auth import get_user_model, authenticate[m
[32m+[m[32mfrom django.utils.translation import ugettext_lazy as _[m
[32m+[m[32mfrom rest_framework import serializers[m
[32m+[m
[32m+[m
[32m+[m[32mclass UserSerializer(serializers.ModelSerializer):[m
[32m+[m[32m    """Serializer for the user object"""[m
[32m+[m
[32m+[m[32m    class Meta:[m
[32m+[m[32m        model = get_user_model()[m
[32m+[m[32m        fields = ('email', 'password', 'name')[m
[32m+[m[32m        extra_kwargs = {'password': {'write_only': True, 'min_length': 5}}[m
[32m+[m
[32m+[m[32m    def create(self, validated_data):[m
[32m+[m[32m        """Create a new user with encrypted password and return it"""[m
[32m+[m[32m        return get_user_model().objects.create_user(**validated_data)[m
[32m+[m
[32m+[m
[32m+[m[32mclass AuthTokenSerializer(serializers.Serializer):[m
[32m+[m[32m    """Serializer for the user authentication object"""[m
[32m+[m[32m    email = serializers.CharField[m
[32m+[m[32m    password = serializers.CharField([m
[32m+[m[32m        style={'input_type': 'password'},[m
[32m+[m[32m        trim_whitespace=False[m
[32m+[m[32m    )[m
[32m+[m
[32m+[m[32m    def validate(self, attrs):[m
[32m+[m[32m        """Validate and authenticate the user"""[m
[32m+[m[32m        email = attrs.get('email')[m
[32m+[m[32m        password = attrs.get('password')[m
[32m+[m[32m        user = authenticate([m
[32m+[m[32m            request=self.context.get('request'),[m
[32m+[m[32m            username=email,[m
[32m+[m[32m            password=password[m
[32m+[m[32m        )[m
[32m+[m[32m        if not user:[m
[32m+[m[32m            msg = _('Unable to authenticate for user with provided credentials')[m
[32m+[m[32m            raise serializers.ValidationError(msg, code='authentication')[m
[32m+[m[32m        attrs['user'] = user[m
[32m+[m[32m        return attrs[m
[1mdiff --git a/app/user/tests/__init__.py b/app/user/tests/__init__.py[m
[1mnew file mode 100644[m
[1mindex 0000000..e69de29[m
[1mdiff --git a/app/user/tests/test_user_api.py b/app/user/tests/test_user_api.py[m
[1mnew file mode 100644[m
[1mindex 0000000..747f3f4[m
[1m--- /dev/null[m
[1m+++ b/app/user/tests/test_user_api.py[m
[36m@@ -0,0 +1,90 @@[m
[32m+[m[32mfrom django.test import TestCase[m
[32m+[m[32mfrom django.contrib.auth import get_user_model[m
[32m+[m[32mfrom django.urls import reverse[m
[32m+[m
[32m+[m[32mfrom rest_framework.test import APIClient[m
[32m+[m[32mfrom rest_framework import status[m
[32m+[m
[32m+[m[32mCREATE_USER_URL = reverse('user:create')[m
[32m+[m[32mTOKEN_URL = reverse('user:token')[m
[32m+[m
[32m+[m
[32m+[m[32mdef create_user(**params):[m
[32m+[m[32m    """Helper function to create new user"""[m
[32m+[m[32m    return get_user_model().objects.create_user(**params)[m
[32m+[m
[32m+[m
[32m+[m[32mclass PublicUserApiTests(TestCase):[m
[32m+[m[32m    """Test the users API (public)"""[m
[32m+[m
[32m+[m[32m    def setUp(self):[m
[32m+[m[32m        self.client = APIClient()[m
[32m+[m
[32m+[m[32m    def test_create_valid_user_success(self):[m
[32m+[m[32m        """Test creating using with a valid payload is successful"""[m
[32m+[m[32m        payload = {[m
[32m+[m[32m            'email': 'test@mycompany.com',[m
[32m+[m[32m            'password': 'testpass',[m
[32m+[m[32m            'name': 'name',[m
[32m+[m[32m        }[m
[32m+[m[32m        res = self.client.post(CREATE_USER_URL, payload)[m
[32m+[m
[32m+[m[32m        self.assertEqual(res.status_code, status.HTTP_201_CREATED)[m
[32m+[m[32m        user = get_user_model().objects.get(**res.data)[m
[32m+[m[32m        self.assertTrue(user.check_password(payload['password']))[m
[32m+[m[32m        self.assertNotIn('password', res.data)[m
[32m+[m
[32m+[m[32m    def test_user_exists(self):[m
[32m+[m[32m        """Test creating a user that already exists fails"""[m
[32m+[m[32m        payload = {'email': 'test@mycompany.com', 'password': 'testpass'}[m
[32m+[m[32m        create_user(**payload)[m
[32m+[m[32m        res = self.client.post(CREATE_USER_URL, payload)[m
[32m+[m
[32m+[m[32m        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)[m
[32m+[m
[32m+[m[32m    def test_password_too_short(self):[m
[32m+[m[32m        """Test that password must be more than 5 characters"""[m
[32m+[m[32m        payload = {'email': 'test@londonappdev.com', 'password': 'pw'}[m
[32m+[m[32m        res = self.client.post(CREATE_USER_URL, payload)[m
[32m+[m
[32m+[m[32m        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)[m
[32m+[m[32m        user_exists = get_user_model().objects.filter([m
[32m+[m[32m            email=payload['email'][m
[32m+[m[32m        ).exists()[m
[32m+[m[32m        self.assertFalse(user_exists)[m
[32m+[m
[32m+[m[32m    def test_create_token_for_user(self):[m
[32m+[m[32m        """"Test that the token is created for the user"""[m
[32m+[m[32m        payload = {[m
[32m+[m[32m            'email': 'myemail@mycompany.com',[m
[32m+[m[32m            'password': 'testpass',[m
[32m+[m[32m            'name': 'myname'[m
[32m+[m[32m        }[m
[32m+[m[32m        create_user(**payload)[m
[32m+[m[32m        res = self.client.post(TOKEN_URL, payload)[m
[32m+[m[32m        self.assertIn('token', res.data)[m
[32m+[m[32m        self.assertEqual(res.status_code, status.HTTP_200_OK)[m
[32m+[m
[32m+[m[32m    def test_create_token_invalid_credentials(self):[m
[32m+[m[32m        """Test that token is not created if invalid credentials are given"""[m
[32m+[m
[32m+[m[32m        create_user(email='myemail@mycompany.com', password='testpass')[m
[32m+[m[32m        payload = {[m
[32m+[m[32m            'email': 'myemail@mycompany.com',[m
[32m+[m[32m            'password': 'testfail'[m
[32m+[m[32m        }[m
[32m+[m[32m        res = self.client.post(TOKEN_URL,payload)[m
[32m+[m
[32m+[m[32m        self.assertNotIn('token', res.data)[m
[32m+[m[32m        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)[m
[32m+[m
[32m+[m[32m    def test_create_token_no_user(self):[m
[32m+[m[32m        """Test that token is not created if user doesnt exist"""[m
[32m+[m[32m        payload = {[m
[32m+[m[32m            'email': 'myemail@mycompany.com',[m
[32m+[m[32m            'password': 'testfail'[m
[32m+[m[32m        }[m
[32m+[m[32m        res = self.client.post(TOKEN_URL, payload)[m
[32m+[m
[32m+[m[32m        self.assertNotIn('token', res.data)[m
[32m+[m[32m        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)[m
\ No newline at end of file[m
[1mdiff --git a/app/user/urls.py b/app/user/urls.py[m
[1mnew file mode 100644[m
[1mindex 0000000..e8c9c11[m
[1m--- /dev/null[m
[1m+++ b/app/user/urls.py[m
[36m@@ -0,0 +1,10 @@[m
[32m+[m[32mfrom django.urls import path[m
[32m+[m
[32m+[m[32mfrom user import views[m
[32m+[m
[32m+[m[32mapp_name = 'user'[m
[32m+[m
[32m+[m[32murlpatterns = [[m
[32m+[m[32m    path('create/', views.CreateUserView.as_view(), name='create'),[m
[32m+[m[32m    path('token/', views.CreateTokenView.as_view(), name='token'),[m
[32m+[m[32m][m
[1mdiff --git a/app/user/views.py b/app/user/views.py[m
[1mnew file mode 100644[m
[1mindex 0000000..6a16c68[m
[1m--- /dev/null[m
[1m+++ b/app/user/views.py[m
[36m@@ -0,0 +1,15 @@[m
[32m+[m[32mfrom rest_framework import generics[m
[32m+[m[32mfrom user.serializer import UserSerializer,AuthTokenSerializer[m
[32m+[m[32mfrom rest_framework.authtoken.views import ObtainAuthToken[m
[32m+[m[32mfrom rest_framework.settings import api_settings[m
[32m+[m
[32m+[m
[32m+[m[32mclass CreateUserView(generics.CreateAPIView):[m
[32m+[m[32m    """Create a new user in the system"""[m
[32m+[m[32m    serializer_class = UserSerializer[m
[32m+[m
[32m+[m
[32m+[m[32mclass CreateTokenView(ObtainAuthToken):[m
[32m+[m[32m    """Create a new auth token for the user"""[m
[32m+[m[32m    serializer_class = AuthTokenSerializer[m
[32m+[m[32m    renderer_classes = api_settings.DEFAULT_RENDERER_CLASSES[m
